interface ApiCategory {
  category: string;
  endpoints: string[];
}

export interface SupportedApis {
  chain: string;
  web3DataApi: ApiCategory[];
  nodeApi: ApiCategory[];
  webhookApi: string[];
  streamApi: boolean;
}

export interface ChainInfo {
  protocol: string;
  mainnet: string;
  testnet: string[];
}

export function getChainInfo(protocol: string): ChainInfo {
  const chainInfo = supportedChains.find(
    (chain) => chain.protocol === protocol
  );

  if (!chainInfo) {
    throw Error(`${protocol} is not supported.`);
  }

  return chainInfo;
}

export function isEndpointSupported(chain: string, endpoint: string): boolean {
  const chainData = supportedApisChains.find((api) => api.chain === chain);

  // chainData가 undefined인 경우 false를 반환
  if (!chainData) {
    return false;
  }

  // chainData가 존재하면 엔드포인트 확인
  return (
    chainData.web3DataApi.some((api) => api.endpoints.includes(endpoint)) ||
    chainData.nodeApi.some((api) => api.endpoints.includes(endpoint)) ||
    chainData.webhookApi.includes(endpoint)
  );
}

export const supportedChains: ChainInfo[] = [
  {
    protocol: "ethereum",
    mainnet: "mainnet",
    testnet: ["sepolia", "hoodi"],
  },
  {
    protocol: "polygon",
    mainnet: "mainnet",
    testnet: ["amoy"],
  },
  {
    protocol: "arbitrum",
    mainnet: "mainnet",
    testnet: ["sepolia"],
  },
  {
    protocol: "optimism",
    mainnet: "mainnet",
    testnet: ["sepolia"],
  },
  {
    protocol: "base",
    mainnet: "mainnet",
    testnet: ["sepolia"],
  },
  {
    protocol: "kaia",
    mainnet: "mainnet",
    testnet: ["kairos"],
  },
  {
    protocol: "luniverse",
    mainnet: "mainnet",
    testnet: [],
  },
  {
    protocol: "avalanche",
    mainnet: "mainnet",
    testnet: ["fuji"],
  },
  {
    protocol: "aptos",
    mainnet: "mainnet",
    testnet: [],
  },
  {
    protocol: "bitcoin",
    mainnet: "mainnet",
    testnet: [],
  },
  {
    protocol: "dogecoin",
    mainnet: "mainnet",
    testnet: [],
  },
  {
    protocol: "tron",
    mainnet: "mainnet",
    testnet: [],
  },
  {
    protocol: "xrpl",
    mainnet: "mainnet",
    testnet: [],
  },
  {
    protocol: "chiliz",
    mainnet: "mainnet",
    testnet: [],
  },
  {
    protocol: "bnb",
    mainnet: "mainnet",
    testnet: ["mainnet", "testnet"],
  },
];

export const supportedApisChains: SupportedApis[] = [
  {
    chain: "ethereum",
    streamApi: true,
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getBlocksWithinRange",
          "getGasPrice",
          "getInternalTransactionsByAccount",
          "getInternalTransactionsByTransactionHash",
          "getNextNonceByAccount",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          // "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          // "getTransactionsByTransactionIds",
          "getTransactionsInBlock",
          // "getUnspentTransactionOutputsByAccount",
          "isContract",
          "searchEvents",
        ],
      },
      {
        category: "ens",
        endpoints: [
          "getAddressByEnsName",
          "getEnsNameByAddress",
          "getEnsRecordByName",
          "getEnsRecordsByAccount",
        ],
      },
      {
        category: "native",
        endpoints: [
          "getNativeBalanceByAccount",
          // "getNativeTokenBalanceByAccount",
          // "getNativeTokenTransfersByAccount",
        ],
      },
      {
        category: "nft",
        endpoints: [
          "getNftContractMetadataByContracts",
          "getNftsOwnedByAccount",
          "getNftTransfersByAccount",
          "getNftTransfersByContract",
          "getNftTransfersByTokenId",
          "getNftTransfersWithinRange",
          "getNftContractsByAccount",
          "getNftHoldersByTokenId",
          "getNftHoldersByContract",
          "getNftMetadataByContract",
          "getNftMetadataByTokenIds",
          "searchNftContractMetadataByKeyword",
          "syncNftMetadata",
        ],
      },
      {
        category: "stats",
        endpoints: [
          "getAccountStats",
          "getDailyActiveAccountsStatsByContract",
          "getDailyActiveAccountStats",
          "getDailyTransactionsStats",
          "getDailyTransactionsStatsByContract",
          "getHourlyActiveAccountsStats",
          "getHourlyActiveAccountsStatsByContract",
          "getHourlyTransactionsStats",
          "getHourlyTransactionsStatsByContract",
        ],
      },
      {
        category: "token",
        endpoints: [
          "getTokenAllowance",
          "getTokenContractMetadataByContracts",
          "getTokenHoldersByContract",
          "getTokenPricesByContracts",
          "getTokensOwnedByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByContract",
          "getTokenTransfersWithinRange",
          "searchTokenContractMetadataByKeyword",
        ],
      },
    ],
    // ethereum
    nodeApi: [
      {
        category: "eth",
        endpoints: [
          "eth_blockNumber",
          "eth_call",
          "eth_chainId",
          "eth_createAccessList",
          "eth_estimateGas",
          "eth_feeHistory",
          "eth_gasPrice",
          "eth_getBalance",
          "eth_getBlockByHash",
          "eth_getBlockByNumber",
          "eth_getBlockReceipts",
          "eth_getBlockTransactionCountByHash",
          "eth_getBlockTransactionCountByNumber",
          "eth_getCode",
          "eth_getFilterChanges",
          "eth_getFilterLogs",
          "eth_getLogs",
          "eth_getProof",
          "eth_getStorageAt",
          "eth_getTransactionByBlockHashAndIndex",
          "eth_getTransactionByBlockNumberAndIndex",
          "eth_getTransactionByHash",
          "eth_getTransactionCount",
          "eth_getTransactionReceipt",
          "eth_getUncleByBlockHashAndIndex",
          "eth_getUncleByBlockNumberAndIndex",
          "eth_getUncleCountByBlockHash",
          "eth_getUncleCountByBlockNumber",
          "eth_maxPriorityFeePerGas",
          "eth_newBlockFilter",
          "eth_newFilter",
          "eth_newPendingTransactionFilter",
          "eth_sendRawTransaction",
          "eth_uninstallFilter",
          "eth_subscribe",
          "eth_unsubscribe",
        ],
      },
      { category: "net", endpoints: ["net_listening", "net_version"] },
      { category: "web3", endpoints: ["web3_clientVersion", "web3_sha3"] },
      {
        category: "trace",
        endpoints: [
          "trace_block",
          "trace_call",
          "trace_filter",
          "trace_get",
          "trace_replayBlockTransactions",
          "trace_replayTransaction",
          "trace_transaction",
        ],
      },
      {
        category: "debug",
        endpoints: [
          "debug_traceBlockByHash",
          "debug_traceBlockByNumber",
          "debug_traceCall",
          "debug_traceTransaction",
        ],
      },
      { category: "bor", endpoints: [] },
      { category: "optimism", endpoints: [] },
      { category: "kaia", endpoints: [] },
      { category: "klay", endpoints: [] },
    ],
    // ethereum
    webhookApi: [
      "createWebhook",
      "updateWebhook",
      "getWebhook",
      "deleteWebhook",
      // "getWebhookHistory"
    ],
  },
  {
    chain: "polygon",
    streamApi: true,
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getBlocksWithinRange",
          "getGasPrice",
          "getInternalTransactionsByAccount",
          "getInternalTransactionsByTransactionHash",
          "getNextNonceByAccount",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          // "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          // "getTransactionsByTransactionIds",
          "getTransactionsInBlock",
          // "getUnspentTransactionOutputsByAccount",
          "isContract",
          "searchEvents",
        ],
      },
      { category: "ens", endpoints: [] },
      {
        category: "native",
        endpoints: [
          "getNativeBalanceByAccount",
          // "getNativeTokenBalanceByAccount",
          // "getNativeTokenTransfersByAccount",
        ],
      },
      {
        category: "nft",
        endpoints: [
          "getNftContractMetadataByContracts",
          "getNftsOwnedByAccount",
          "getNftTransfersByAccount",
          "getNftTransfersByContract",
          "getNftTransfersByTokenId",
          "getNftTransfersWithinRange",
          "getNftContractsByAccount",
          "getNftHoldersByTokenId",
          "getNftHoldersByContract",
          "getNftMetadataByContract",
          "getNftMetadataByTokenIds",
          "searchNftContractMetadataByKeyword",
          "syncNftMetadata",
        ],
      },
      { category: "stats", endpoints: ["getAccountStats"] },
      {
        category: "token",
        endpoints: [
          "getTokenAllowance",
          "getTokenContractMetadataByContracts",
          "getTokenHoldersByContract",
          "getTokenPricesByContracts",
          "getTokensOwnedByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByContract",
          "getTokenTransfersWithinRange",
          "searchTokenContractMetadataByKeyword",
        ],
      },
    ],
    // polygon
    nodeApi: [
      {
        category: "eth",
        endpoints: [
          "eth_blockNumber",
          "eth_call",
          "eth_chainId",
          "eth_createAccessList",
          "eth_estimateGas",
          "eth_feeHistory",
          "eth_gasPrice",
          "eth_getBalance",
          "eth_getBlockByHash",
          "eth_getBlockByNumber",
          // "eth_getBlockReceipts",
          "eth_getBlockTransactionCountByHash",
          "eth_getBlockTransactionCountByNumber",
          "eth_getCode",
          "eth_getFilterChanges",
          "eth_getFilterLogs",
          "eth_getLogs",
          "eth_getProof",
          "eth_getStorageAt",
          "eth_getTransactionByBlockHashAndIndex",
          "eth_getTransactionByBlockNumberAndIndex",
          "eth_getTransactionByHash",
          "eth_getTransactionCount",
          "eth_getTransactionReceipt",
          "eth_getUncleByBlockHashAndIndex",
          "eth_getUncleByBlockNumberAndIndex",
          "eth_getUncleCountByBlockHash",
          "eth_getUncleCountByBlockNumber",
          "eth_maxPriorityFeePerGas",
          "eth_newBlockFilter",
          "eth_newFilter",
          "eth_newPendingTransactionFilter",
          "eth_sendRawTransaction",
          "eth_uninstallFilter",
          "eth_subscribe",
          "eth_unsubscribe",
        ],
      },
      { category: "net", endpoints: ["net_listening", "net_version"] },
      { category: "web3", endpoints: ["web3_clientVersion", "web3_sha3"] },
      { category: "trace", endpoints: [] },
      {
        category: "debug",
        endpoints: [
          "debug_traceBlockByHash",
          "debug_traceBlockByNumber",
          "debug_traceCall",
          "debug_traceTransaction",
        ],
      },
      {
        category: "bor",
        endpoints: [
          "bor_getAuthor",
          "bor_getCurrentProposer",
          "bor_getCurrentValidators",
          "bor_getSignersAtHash",
        ],
      },
      { category: "optimism", endpoints: [] },
      { category: "kaia", endpoints: [] },
      { category: "klay", endpoints: [] },
    ],
    // polygon
    webhookApi: [
      "createWebhook",
      "updateWebhook",
      "getWebhook",
      "deleteWebhook",
      // "getWebhookHistory"
    ],
  },
  {
    chain: "optimism",
    streamApi: true,
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getBlocksWithinRange",
          "getGasPrice",
          // "getInternalTransactionsByAccount",
          // "getInternalTransactionsByTransactionHash",
          "getNextNonceByAccount",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          // "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          // "getTransactionsByTransactionIds",
          "getTransactionsInBlock",
          // "getUnspentTransactionOutputsByAccount",
          "isContract",
          "searchEvents",
        ],
      },
      { category: "ens", endpoints: [] },
      {
        category: "native",
        endpoints: [
          "getNativeBalanceByAccount",
          // "getNativeTokenBalanceByAccount",
          // "getNativeTokenTransfersByAccount",
        ],
      },
      {
        category: "nft",
        endpoints: [
          "getNftContractMetadataByContracts",
          "getNftsOwnedByAccount",
          "getNftTransfersByAccount",
          "getNftTransfersByContract",
          "getNftTransfersByTokenId",
          "getNftTransfersWithinRange",
          "getNftContractsByAccount",
          "getNftHoldersByTokenId",
          "getNftHoldersByContract",
          "getNftMetadataByContract",
          "getNftMetadataByTokenIds",
          "searchNftContractMetadataByKeyword",
          "syncNftMetadata",
        ],
      },
      { category: "stats", endpoints: ["getAccountStats"] },
      {
        category: "token",
        endpoints: [
          "getTokenAllowance",
          "getTokenContractMetadataByContracts",
          "getTokenHoldersByContract",
          "getTokenPricesByContracts",
          "getTokensOwnedByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByContract",
          "getTokenTransfersWithinRange",
          "searchTokenContractMetadataByKeyword",
        ],
      },
    ],
    // optimism
    nodeApi: [
      {
        category: "eth",
        endpoints: [
          "eth_blockNumber",
          "eth_call",
          "eth_chainId",
          "eth_createAccessList",
          "eth_estimateGas",
          "eth_feeHistory",
          "eth_gasPrice",
          "eth_getBalance",
          "eth_getBlockByHash",
          "eth_getBlockByNumber",
          "eth_getBlockReceipts",
          "eth_getBlockTransactionCountByHash",
          "eth_getBlockTransactionCountByNumber",
          "eth_getCode",
          "eth_getFilterChanges",
          "eth_getFilterLogs",
          "eth_getLogs",
          "eth_getProof",
          "eth_getStorageAt",
          "eth_getTransactionByBlockHashAndIndex",
          "eth_getTransactionByBlockNumberAndIndex",
          "eth_getTransactionByHash",
          "eth_getTransactionCount",
          "eth_getTransactionReceipt",
          "eth_getUncleByBlockHashAndIndex",
          "eth_getUncleByBlockNumberAndIndex",
          "eth_getUncleCountByBlockHash",
          "eth_getUncleCountByBlockNumber",
          "eth_maxPriorityFeePerGas",
          "eth_newBlockFilter",
          "eth_newFilter",
          "eth_newPendingTransactionFilter",
          "eth_sendRawTransaction",
          "eth_uninstallFilter",
          "eth_subscribe",
          "eth_unsubscribe",
        ],
      },
      { category: "net", endpoints: ["net_listening", "net_version"] },
      { category: "web3", endpoints: ["web3_clientVersion", "web3_sha3"] },
      { category: "trace", endpoints: [] },
      {
        category: "debug",
        endpoints: [
          "debug_traceBlockByHash",
          "debug_traceBlockByNumber",
          "debug_traceCall",
          "debug_traceTransaction",
        ],
      },
      { category: "bor", endpoints: [] },
      {
        category: "optimism",
        endpoints: ["optimism_outputAtBlock", "optimism_rollupConfig"],
      },
      { category: "kaia", endpoints: [] },
      { category: "klay", endpoints: [] },
    ],
    // optimism
    webhookApi: [
      "createWebhook",
      "updateWebhook",
      "getWebhook",
      "deleteWebhook",
      // "getWebhookHistory"
    ],
  },
  {
    chain: "arbitrum",
    streamApi: true,
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getBlocksWithinRange",
          "getGasPrice",
          "getInternalTransactionsByAccount",
          "getInternalTransactionsByTransactionHash",
          "getNextNonceByAccount",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          // "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          // "getTransactionsByTransactionIds",
          "getTransactionsInBlock",
          // "getUnspentTransactionOutputsByAccount",
          "isContract",
          "searchEvents",
        ],
      },
      { category: "ens", endpoints: [] },
      {
        category: "native",
        endpoints: [
          "getNativeBalanceByAccount",
          // "getNativeTokenBalanceByAccount",
          // "getNativeTokenTransfersByAccount",
        ],
      },
      {
        category: "nft",
        endpoints: [
          "getNftContractMetadataByContracts",
          "getNftsOwnedByAccount",
          "getNftTransfersByAccount",
          "getNftTransfersByContract",
          "getNftTransfersByTokenId",
          "getNftTransfersWithinRange",
          "getNftContractsByAccount",
          "getNftHoldersByTokenId",
          "getNftHoldersByContract",
          "getNftMetadataByContract",
          "getNftMetadataByTokenIds",
          "searchNftContractMetadataByKeyword",
          "syncNftMetadata",
        ],
      },
      { category: "stats", endpoints: ["getAccountStats"] },
      {
        category: "token",
        endpoints: [
          "getTokenAllowance",
          "getTokenContractMetadataByContracts",
          "getTokenHoldersByContract",
          "getTokenPricesByContracts",
          "getTokensOwnedByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByContract",
          "getTokenTransfersWithinRange",
          "searchTokenContractMetadataByKeyword",
        ],
      },
    ],
    // arbitrum
    nodeApi: [
      {
        category: "eth",
        endpoints: [
          "eth_blockNumber",
          "eth_call",
          "eth_chainId",
          "eth_createAccessList",
          "eth_estimateGas",
          "eth_feeHistory",
          "eth_gasPrice",
          "eth_getBalance",
          "eth_getBlockByHash",
          "eth_getBlockByNumber",
          "eth_getBlockReceipts",
          "eth_getBlockTransactionCountByHash",
          "eth_getBlockTransactionCountByNumber",
          "eth_getCode",
          "eth_getFilterChanges",
          "eth_getFilterLogs",
          "eth_getLogs",
          "eth_getProof",
          "eth_getStorageAt",
          "eth_getTransactionByBlockHashAndIndex",
          "eth_getTransactionByBlockNumberAndIndex",
          "eth_getTransactionByHash",
          "eth_getTransactionCount",
          "eth_getTransactionReceipt",
          "eth_getUncleByBlockHashAndIndex",
          "eth_getUncleByBlockNumberAndIndex",
          "eth_getUncleCountByBlockHash",
          "eth_getUncleCountByBlockNumber",
          "eth_maxPriorityFeePerGas",
          "eth_newBlockFilter",
          "eth_newFilter",
          "eth_newPendingTransactionFilter",
          "eth_sendRawTransaction",
          "eth_uninstallFilter",
          "eth_subscribe",
          "eth_unsubscribe",
        ],
      },
      { category: "net", endpoints: ["net_version"] },
      { category: "web3", endpoints: ["web3_clientVersion", "web3_sha3"] },
      { category: "trace", endpoints: [] },
      {
        category: "debug",
        endpoints: [
          "debug_traceBlockByHash",
          "debug_traceBlockByNumber",
          "debug_traceCall",
          "debug_traceTransaction",
        ],
      },
      { category: "bor", endpoints: [] },
      { category: "optimism", endpoints: [] },
      { category: "kaia", endpoints: [] },
      { category: "klay", endpoints: [] },
    ],
    // arbitrum
    webhookApi: [
      "createWebhook",
      "updateWebhook",
      "getWebhook",
      "deleteWebhook",
      // "getWebhookHistory"
    ],
  },
  {
    chain: "base",
    streamApi: true,
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getBlocksWithinRange",
          "getGasPrice",
          "getInternalTransactionsByAccount",
          "getInternalTransactionsByTransactionHash",
          "getNextNonceByAccount",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          // "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          // "getTransactionsByTransactionIds",
          "getTransactionsInBlock",
          // "getUnspentTransactionOutputsByAccount",
          "isContract",
          "searchEvents",
        ],
      },
      { category: "ens", endpoints: [] },
      {
        category: "native",
        endpoints: [
          "getNativeBalanceByAccount",
          // "getNativeTokenBalanceByAccount",
          // "getNativeTokenTransfersByAccount",
        ],
      },
      {
        category: "nft",
        endpoints: [
          "getNftContractMetadataByContracts",
          "getNftsOwnedByAccount",
          "getNftTransfersByAccount",
          "getNftTransfersByContract",
          "getNftTransfersByTokenId",
          "getNftTransfersWithinRange",
          "getNftContractsByAccount",
          "getNftHoldersByTokenId",
          "getNftHoldersByContract",
          "getNftMetadataByContract",
          "getNftMetadataByTokenIds",
          "searchNftContractMetadataByKeyword",
          "syncNftMetadata",
        ],
      },
      { category: "stats", endpoints: ["getAccountStats"] },
      {
        category: "token",
        endpoints: [
          "getTokenAllowance",
          "getTokenContractMetadataByContracts",
          "getTokenHoldersByContract",
          "getTokenPricesByContracts",
          "getTokensOwnedByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByContract",
          "getTokenTransfersWithinRange",
          "searchTokenContractMetadataByKeyword",
        ],
      },
    ],
    // base
    nodeApi: [
      {
        category: "eth",
        endpoints: [
          "eth_blockNumber",
          "eth_call",
          "eth_chainId",
          "eth_createAccessList",
          "eth_estimateGas",
          "eth_feeHistory",
          "eth_gasPrice",
          "eth_getBalance",
          "eth_getBlockByHash",
          "eth_getBlockByNumber",
          "eth_getBlockReceipts",
          "eth_getBlockTransactionCountByHash",
          "eth_getBlockTransactionCountByNumber",
          "eth_getCode",
          "eth_getFilterChanges",
          "eth_getFilterLogs",
          "eth_getLogs",
          "eth_getProof",
          "eth_getStorageAt",
          "eth_getTransactionByBlockHashAndIndex",
          "eth_getTransactionByBlockNumberAndIndex",
          "eth_getTransactionByHash",
          "eth_getTransactionCount",
          "eth_getTransactionReceipt",
          "eth_getUncleByBlockHashAndIndex",
          "eth_getUncleByBlockNumberAndIndex",
          "eth_getUncleCountByBlockHash",
          "eth_getUncleCountByBlockNumber",
          "eth_maxPriorityFeePerGas",
          "eth_newBlockFilter",
          "eth_newFilter",
          "eth_newPendingTransactionFilter",
          "eth_sendRawTransaction",
          "eth_uninstallFilter",
          "eth_subscribe",
          "eth_unsubscribe",
        ],
      },
      { category: "net", endpoints: ["net_listening", "net_version"] },
      { category: "web3", endpoints: ["web3_clientVersion", "web3_sha3"] },
      { category: "trace", endpoints: [] },
      {
        category: "debug",
        endpoints: [
          "debug_traceBlockByHash",
          "debug_traceBlockByNumber",
          "debug_traceCall",
          "debug_traceTransaction",
        ],
      },
      { category: "bor", endpoints: [] },
      {
        category: "optimism",
        endpoints: ["optimism_outputAtBlock", "optimism_rollupConfig"],
      },
      { category: "kaia", endpoints: [] },
      { category: "klay", endpoints: [] },
    ],
    // base
    webhookApi: [
      "createWebhook",
      "updateWebhook",
      "getWebhook",
      "deleteWebhook",
      // "getWebhookHistory"
    ],
  },
  {
    chain: "kaia",
    streamApi: true,
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getBlocksWithinRange",
          "getGasPrice",
          "getInternalTransactionsByAccount",
          "getInternalTransactionsByTransactionHash",
          "getNextNonceByAccount",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          // "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          // "getTransactionsByTransactionIds",
          "getTransactionsInBlock",
          // "getUnspentTransactionOutputsByAccount",
          "isContract",
          "searchEvents",
        ],
      },
      { category: "ens", endpoints: [] },
      {
        category: "native",
        endpoints: [
          "getNativeBalanceByAccount",
          // "getNativeTokenBalanceByAccount",
          // "getNativeTokenTransfersByAccount",
        ],
      },
      {
        category: "nft",
        endpoints: [
          "getNftContractMetadataByContracts",
          "getNftsOwnedByAccount",
          "getNftTransfersByAccount",
          "getNftTransfersByContract",
          "getNftTransfersByTokenId",
          "getNftTransfersWithinRange",
          "getNftContractsByAccount",
          "getNftHoldersByTokenId",
          "getNftHoldersByContract",
          "getNftMetadataByContract",
          "getNftMetadataByTokenIds",
          "searchNftContractMetadataByKeyword",
          "syncNftMetadata",
        ],
      },
      { category: "stats", endpoints: ["getAccountStats"] },
      {
        category: "token",
        endpoints: [
          "getTokenAllowance",
          "getTokenContractMetadataByContracts",
          "getTokenHoldersByContract",
          "getTokenPricesByContracts",
          "getTokensOwnedByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByContract",
          "getTokenTransfersWithinRange",
          "searchTokenContractMetadataByKeyword",
        ],
      },
    ],
    // kaia
    nodeApi: [
      {
        category: "eth",
        endpoints: [
          "eth_blockNumber",
          "eth_call",
          "eth_chainId",
          "eth_createAccessList",
          "eth_estimateGas",
          "eth_feeHistory",
          "eth_gasPrice",
          "eth_getBalance",
          "eth_getBlockByHash",
          "eth_getBlockByNumber",
          "eth_getBlockReceipts",
          "eth_getBlockTransactionCountByHash",
          "eth_getBlockTransactionCountByNumber",
          "eth_getCode",
          "eth_getFilterChanges",
          "eth_getFilterLogs",
          "eth_getLogs",
          "eth_getProof",
          "eth_getStorageAt",
          "eth_getTransactionByBlockHashAndIndex",
          "eth_getTransactionByBlockNumberAndIndex",
          "eth_getTransactionByHash",
          "eth_getTransactionCount",
          "eth_getTransactionReceipt",
          "eth_getUncleByBlockHashAndIndex",
          "eth_getUncleByBlockNumberAndIndex",
          "eth_getUncleCountByBlockHash",
          "eth_getUncleCountByBlockNumber",
          "eth_maxPriorityFeePerGas",
          "eth_newBlockFilter",
          "eth_newFilter",
          "eth_newPendingTransactionFilter",
          "eth_sendRawTransaction",
          "eth_uninstallFilter",
          "eth_subscribe",
          "eth_unsubscribe",
        ],
      },
      { category: "net", endpoints: ["net_listening", "net_version"] },
      { category: "web3", endpoints: ["web3_clientVersion", "web3_sha3"] },
      { category: "trace", endpoints: [] },
      {
        category: "debug",
        endpoints: [
          "debug_traceBlockByHash",
          "debug_traceBlockByNumber",
          "debug_traceCall",
          "debug_traceTransaction",
        ],
      },
      { category: "bor", endpoints: [] },
      { category: "optimism", endpoints: [] },
      {
        category: "kaia",
        endpoints: [
          "kaia_blockNumber",
          "kaia_call",
          "kaia_chainID",
          "kaia_createAccessList",
          "kaia_estimateGas",
          "kaia_feeHistory",
          "kaia_gasPrice",
          "kaia_getBalance",
          "kaia_getBlockByHash",
          "kaia_getBlockByNumber",
          "kaia_getBlockReceipts",
          "kaia_getBlockTransactionCountByHash",
          "kaia_getBlockTransactionCountByNumber",
          "kaia_getCode",
          "kaia_getFilterChanges",
          "kaia_getFilterLogs",
          "kaia_getLogs",
          "kaia_getProof",
          "kaia_getStorageAt",
          "kaia_getTransactionByBlockHashAndIndex",
          "kaia_getTransactionByBlockNumberAndIndex",
          "kaia_getTransactionByHash",
          "kaia_getTransactionCount",
          "kaia_getTransactionReceipt",
          "kaia_maxPriorityFeePerGas",
          "kaia_newBlockFilter",
          "kaia_newFilter",
          "kaia_newPendingTransactionFilter",
          "kaia_sendRawTransaction",
          "kaia_uninstallFilter",
        ],
      },
      {
        category: "klay",
        endpoints: [
          "klay_blockNumber",
          "klay_call",
          "klay_chainID",
          "klay_createAccessList",
          "klay_estimateGas",
          "klay_feeHistory",
          "klay_gasPrice",
          "klay_getBalance",
          "klay_getBlockByHash",
          "klay_getBlockByNumber",
          "klay_getBlockReceipts",
          "klay_getBlockTransactionCountByHash",
          "klay_getBlockTransactionCountByNumber",
          "klay_getCode",
          "klay_getFilterChanges",
          "klay_getFilterLogs",
          "klay_getLogs",
          "klay_getProof",
          "klay_getStorageAt",
          "klay_getTransactionByBlockHashAndIndex",
          "klay_getTransactionByBlockNumberAndIndex",
          "klay_getTransactionByHash",
          "klay_getTransactionCount",
          "klay_getTransactionReceipt",
          "klay_maxPriorityFeePerGas",
          "klay_newBlockFilter",
          "klay_newFilter",
          "klay_newPendingTransactionFilter",
          "klay_sendRawTransaction",
          "klay_uninstallFilter",
        ],
      },
    ],
    // kaia
    webhookApi: [
      "createWebhook",
      "updateWebhook",
      "getWebhook",
      "deleteWebhook",
      // "getWebhookHistory"
    ],
  },
  {
    chain: "luniverse",
    streamApi: false,
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getBlocksWithinRange",
          "getGasPrice",
          "getInternalTransactionsByAccount",
          "getInternalTransactionsByTransactionHash",
          "getNextNonceByAccount",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          // "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          // "getTransactionsByTransactionIds",
          "getTransactionsInBlock",
          // "getUnspentTransactionOutputsByAccount",
          "isContract",
          "searchEvents",
        ],
      },
      { category: "ens", endpoints: [] },
      {
        category: "native",
        endpoints: [
          "getNativeBalanceByAccount",
          // "getNativeTokenBalanceByAccount",
          // "getNativeTokenTransfersByAccount",
        ],
      },
      {
        category: "nft",
        endpoints: [
          "getNftContractMetadataByContracts",
          "getNftsOwnedByAccount",
          "getNftTransfersByAccount",
          "getNftTransfersByContract",
          "getNftTransfersByTokenId",
          "getNftTransfersWithinRange",
          "getNftContractsByAccount",
          "getNftHoldersByTokenId",
          "getNftHoldersByContract",
          "getNftMetadataByContract",
          "getNftMetadataByTokenIds",
          "searchNftContractMetadataByKeyword",
          "syncNftMetadata",
        ],
      },
      {
        category: "stats",
        endpoints: [
          "getAccountStats",
          "getDailyActiveAccountsStatsByContract",
          "getDailyActiveAccountStats",
          "getDailyTransactionsStats",
          "getDailyTransactionsStatsByContract",
          "getHourlyActiveAccountsStats",
          "getHourlyActiveAccountsStatsByContract",
          "getHourlyTransactionsStats",
          "getHourlyTransactionsStatsByContract",
        ],
      },
      {
        category: "token",
        endpoints: [
          "getTokenAllowance",
          "getTokenContractMetadataByContracts",
          "getTokenHoldersByContract",
          "getTokenPricesByContracts",
          "getTokensOwnedByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByContract",
          "getTokenTransfersWithinRange",
          "searchTokenContractMetadataByKeyword",
        ],
      },
    ],
    // luniverse
    nodeApi: [
      {
        category: "eth",
        endpoints: [
          "eth_blockNumber",
          "eth_call",
          "eth_chainId",
          "eth_createAccessList",
          "eth_estimateGas",
          "eth_feeHistory",
          "eth_gasPrice",
          "eth_getBalance",
          "eth_getBlockByHash",
          "eth_getBlockByNumber",
          // "eth_getBlockReceipts",
          "eth_getBlockTransactionCountByHash",
          "eth_getBlockTransactionCountByNumber",
          "eth_getCode",
          "eth_getFilterChanges",
          "eth_getFilterLogs",
          "eth_getLogs",
          "eth_getProof",
          "eth_getStorageAt",
          "eth_getTransactionByBlockHashAndIndex",
          "eth_getTransactionByBlockNumberAndIndex",
          "eth_getTransactionByHash",
          "eth_getTransactionCount",
          "eth_getTransactionReceipt",
          "eth_getUncleByBlockHashAndIndex",
          "eth_getUncleByBlockNumberAndIndex",
          "eth_getUncleCountByBlockHash",
          "eth_getUncleCountByBlockNumber",
          "eth_maxPriorityFeePerGas",
          "eth_newBlockFilter",
          "eth_newFilter",
          "eth_newPendingTransactionFilter",
          "eth_sendRawTransaction",
          "eth_uninstallFilter",
          "eth_subscribe",
          "eth_unsubscribe",
        ],
      },
      { category: "net", endpoints: ["net_listening", "net_version"] },
      { category: "web3", endpoints: ["web3_clientVersion", "web3_sha3"] },
      { category: "trace", endpoints: [] },
      {
        category: "debug",
        endpoints: [
          "debug_traceBlockByHash",
          "debug_traceBlockByNumber",
          "debug_traceCall",
          "debug_traceTransaction",
        ],
      },
      { category: "bor", endpoints: [] },
      { category: "optimism", endpoints: [] },
      { category: "kaia", endpoints: [] },
      { category: "klay", endpoints: [] },
    ],
    // luniverse
    webhookApi: [
      // "createWebhook",
      // "updateWebhook",
      // "getWebhook",
      // "deleteWebhook",
      // "getWebhookHistory"
    ],
  },
  {
    chain: "avalanche",
    streamApi: false,
    web3DataApi: [],
    // avalanche c-chain
    nodeApi: [
      {
        category: "eth",
        endpoints: [
          "eth_blockNumber",
          "eth_call",
          "eth_chainId",
          "eth_createAccessList",
          "eth_estimateGas",
          "eth_feeHistory",
          "eth_gasPrice",
          "eth_getBalance",
          "eth_getBlockByHash",
          "eth_getBlockByNumber",
          // "eth_getBlockReceipts",
          "eth_getBlockTransactionCountByHash",
          "eth_getBlockTransactionCountByNumber",
          "eth_getCode",
          "eth_getFilterChanges",
          "eth_getFilterLogs",
          "eth_getLogs",
          "eth_getProof",
          "eth_getStorageAt",
          "eth_getTransactionByBlockHashAndIndex",
          "eth_getTransactionByBlockNumberAndIndex",
          "eth_getTransactionByHash",
          "eth_getTransactionCount",
          "eth_getTransactionReceipt",
          "eth_getUncleByBlockHashAndIndex",
          "eth_getUncleByBlockNumberAndIndex",
          "eth_getUncleCountByBlockHash",
          "eth_getUncleCountByBlockNumber",
          "eth_maxPriorityFeePerGas",
          "eth_newBlockFilter",
          "eth_newFilter",
          "eth_newPendingTransactionFilter",
          "eth_sendRawTransaction",
          "eth_uninstallFilter",
          "eth_subscribe",
          "eth_unsubscribe",
        ],
      },
      { category: "net", endpoints: ["net_listening", "net_version"] },
      { category: "web3", endpoints: ["web3_clientVersion", "web3_sha3"] },
      { category: "trace", endpoints: [] },
      {
        category: "debug",
        endpoints: [
          "debug_traceBlockByHash",
          "debug_traceBlockByNumber",
          "debug_traceCall",
          "debug_traceTransaction",
        ],
      },
      { category: "bor", endpoints: [] },
      { category: "optimism", endpoints: [] },
      { category: "kaia", endpoints: [] },
      { category: "klay", endpoints: [] },
    ],
    // luniverse
    webhookApi: [
      // "createWebhook",
      // "updateWebhook",
      // "getWebhook",
      // "deleteWebhook",
      // "getWebhookHistory"
    ],
  },
  {
    chain: "aptos",
    nodeApi: [
      {
        category: "accounts",
        endpoints: [
          "getAccount",
          "getAccountModule",
          "getAccountModules",
          "getAccountResource",
          "getAccountResources",
        ],
      },
      {
        category: "blocks",
        endpoints: ["getBlocksByHeight", "getBlocksByVersion"],
      },
      {
        category: "events",
        endpoints: ["getEventsByCreationNumber", "getEventsByEventHandle"],
      },
      {
        category: "general",
        endpoints: ["getLedgerInfo"],
      },
      {
        category: "tables",
        endpoints: ["getRawTableItem", "getTableItem"],
      },
      {
        category: "transactions",
        endpoints: [
          "encodeSubmission",
          "estimateGasPrice",
          "getAccountTransactions",
          "getTransactionByHash",
          "getTransactionByVersion",
          "getTransaction",
          "simulateTransaction",
          "submitBatchTransactions",
          "submitTransaction",
          "waitForTransactionByHash",
        ],
      },
      {
        category: "view",
        endpoints: ["executeViewFunctionOfAModule"],
      },
    ],
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getBlocksWithinRange",
          "getTransactionsInBlock",
          "getTransactionsByAccount",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          "getTransactionsByHashes",
          "getTransactionByVersion",
          "getTransactionsByVersions",
        ],
      },
      {
        category: "token",
        endpoints: [
          "getTokenBalanceChangesByAccount",
          "getTokenBalanceChangesByAssetType",
          "getTokenBalanceChangesWithinRange",
          "getTokensOwnedByAccount",
          "getTokenAccountsByAssetType",
          "getTokenMetadataByAssetTypes",
          "getTokenPairByAssetType",
          "getAccountStats",
        ],
      },
      {
        category: "stats",
        endpoints: ["getAccountStats"],
      },
    ],
    webhookApi: [
      "createWebhook",
      "updateWebhook",
      "getWebhook",
      "deleteWebhook",
      "getWebhookHistory",
    ],
    streamApi: false,
  },
  {
    chain: "bitcoin",
    nodeApi: [],
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getTotalTransactionCountByAccount",
          "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByTransactionIds",
          "getUnspentTransactionOutputsByAccount",
        ],
      },
      {
        category: "native",
        endpoints: [
          // "getNativeBalanceByAccount",
          "getNativeTokenBalanceByAccount",
          "getNativeTokenTransfersByAccount",
        ],
      },
    ],
    webhookApi: [],
    streamApi: false,
  },
  {
    chain: "dogecoin",
    nodeApi: [],
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getTotalTransactionCountByAccount",
          "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByTransactionIds",
          "getUnspentTransactionOutputsByAccount",
        ],
      },
      {
        category: "native",
        endpoints: [
          // "getNativeBalanceByAccount",
          "getNativeTokenBalanceByAccount",
          "getNativeTokenTransfersByAccount",
        ],
      },
    ],
    webhookApi: [],
    streamApi: false,
  },
  {
    chain: "tron",
    streamApi: true,
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          // "getBlockByHashOrNumber",
          // "getBlocksWithinRange",
          "getInternalTransactionsByAccount",
          "getInternalTransactionsByTransactionHash",
          "getTotalTransactionCountByAccount",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          "getTransactionsInBlock",
          "isContract",
        ],
      },
      {
        category: "native",
        endpoints: [
          "getNativeBalanceByAccount",
          "getNativeTransfersWithinRange",
          "getNativeTransfersByAccount",
          "getNativeHolders",
        ],
      },
      {
        category: "stats",
        endpoints: ["getAccountStats"],
      },
      {
        category: "token",
        endpoints: [
          "getTokenAllowance",
          "getTokenContractMetadataByContracts",
          "getTokenHoldersByContract",
          "getTokensOwnedByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByContract",
          "getTokenTransfersWithinRange",
          "searchTokenContractMetadataByKeyword",
        ],
      },
      {
        category: "asset",
        endpoints: [
          "getAssetMetadataByIssuer",
          "getAssetMetadataByIds",
          "searchAssetMetadataByKeyword",
          "getAssetHoldersById",
          "getAssetTransfersById",
          "getAssetTransfersWithinRange",
          "getAssetTransfersByAccount",
          "getAssetsOwnedByAccount",
        ],
      },
    ],
    // tron
    nodeApi: [],
    // tron
    webhookApi: [],
  },
  {
    chain: "xrpl",
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getLedgerByHashOrIndex",
          "getLedgersWithinRange",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          "getTransactionsInLedger",
        ],
      },
      {
        category: "native",
        endpoints: [
          "getNativeTokenBalanceByAccount",
          "getNativeTokenBalanceChangesByAccount",
        ],
      },
      {
        category: "token",
        endpoints: [
          "getTokenBalanceChangesByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByCurrencyAndIssuer",
          "getTokenTransfersWithinRange",
        ],
      },
    ],
    streamApi: false,
    //xrpl
    nodeApi: [],
    //xrpl
    webhookApi: [],
  },
  {
    chain: "chiliz",
    streamApi: true,
    web3DataApi: [
      {
        category: "blockchain",
        endpoints: [
          "getBlockByHashOrNumber",
          "getBlocksWithinRange",
          "getGasPrice",
          "getInternalTransactionsByAccount",
          "getInternalTransactionsByTransactionHash",
          "getNextNonceByAccount",
          "getTotalTransactionCountByAccount",
          "getTransactionByHash",
          // "getTransactionByTransactionId",
          "getTransactionsByAccount",
          "getTransactionsByHashes",
          // "getTransactionsByTransactionIds",
          "getTransactionsInBlock",
          // "getUnspentTransactionOutputsByAccount",
          "isContract",
          "searchEvents",
        ],
      },
      {
        category: "native",
        endpoints: [
          "getNativeBalanceByAccount",
          // "getNativeTokenBalanceByAccount",
          // "getNativeTokenTransfersByAccount",
        ],
      },
      {
        category: "nft",
        endpoints: [
          "getNftContractMetadataByContracts",
          "getNftsOwnedByAccount",
          "getNftTransfersByAccount",
          "getNftTransfersByContract",
          "getNftTransfersByTokenId",
          "getNftTransfersWithinRange",
          "getNftContractsByAccount",
          "getNftHoldersByTokenId",
          "getNftHoldersByContract",
          "getNftMetadataByContract",
          "getNftMetadataByTokenIds",
          "searchNftContractMetadataByKeyword",
          "syncNftMetadata",
        ],
      },
      {
        category: "stats",
        endpoints: [
          "getAccountStats",
          // "getDailyActiveAccountsStatsByContract",
          // "getDailyActiveAccountStats",
          // "getDailyTransactionsStats",
          // "getDailyTransactionsStatsByContract",
          // "getHourlyActiveAccountsStats",
          // "getHourlyActiveAccountsStatsByContract",
          // "getHourlyTransactionsStats",
          // "getHourlyTransactionsStatsByContract",
        ],
      },
      {
        category: "token",
        endpoints: [
          "getTokenAllowance",
          "getTokenContractMetadataByContracts",
          "getTokenHoldersByContract",
          "getTokenPricesByContracts",
          "getTokensOwnedByAccount",
          "getTokenTransfersByAccount",
          "getTokenTransfersByContract",
          "getTokenTransfersWithinRange",
          "searchTokenContractMetadataByKeyword",
        ],
      },
    ],
    // chiliz
    nodeApi: [],
    // chiliz
    webhookApi: [],
  },
  {
    chain: "bnb",
    streamApi: false,
    web3DataApi: [],
    nodeApi: [
      {
        category: "eth",
        endpoints: [
          "eth_blockNumber",
          "eth_call",
          "eth_chainId",
          "eth_createAccessList",
          "eth_estimateGas",
          "eth_feeHistory",
          "eth_gasPrice",
          "eth_getBalance",
          "eth_getBlockByHash",
          "eth_getBlockByNumber",
          "eth_getBlockReceipts",
          "eth_getBlockTransactionCountByHash",
          "eth_getBlockTransactionCountByNumber",
          "eth_getCode",
          "eth_getFilterChanges",
          "eth_getFilterLogs",
          "eth_getLogs",
          "eth_getProof",
          "eth_getStorageAt",
          "eth_getTransactionByBlockHashAndIndex",
          "eth_getTransactionByBlockNumberAndIndex",
          "eth_getTransactionByHash",
          "eth_getTransactionCount",
          "eth_getTransactionReceipt",
          "eth_getUncleByBlockHashAndIndex",
          "eth_getUncleByBlockNumberAndIndex",
          "eth_getUncleCountByBlockHash",
          "eth_getUncleCountByBlockNumber",
          "eth_maxPriorityFeePerGas",
          "eth_newBlockFilter",
          "eth_newFilter",
          "eth_newPendingTransactionFilter",
          "eth_sendRawTransaction",
          "eth_uninstallFilter",
          "eth_subscribe",
          "eth_unsubscribe",
        ],
      },
      {
        category: "net",
        endpoints: ["net_listening", "net_version"],
      },
      {
        category: "web3",
        endpoints: ["web3_clientVersion", "web3_sha3"],
      },
      { category: "trace", endpoints: [] },
      {
        category: "debug",
        endpoints: [
          "debug_traceBlockByHash",
          "debug_traceBlockByNumber",
          "debug_traceCall",
          "debug_traceTransaction",
        ],
      },
    ],
    webhookApi: [],
  },
];
