openapi: 3.1.0
info:
  title: SUI Node API
  version: 1.2.10
servers:
  - url: https://{sui-network}.nodit.io
    variables:
      sui-network:
        description: The network to use for the API.
        enum:
          - sui-mainnet
        default: sui-mainnet
paths:
  /:
    post:
      security:
        - api_key: []
      tags:
        - suix_getCoins
      description: |
        Return all Coin<`coin_type`> objects owned by an address.
      summary: suix_getCoins
      operationId: suix_getCoins
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - jsonrpc
                - method
                - params
              properties:
                id:
                  type: integer
                  default: 1
                jsonrpc:
                  type: string
                  default: '2.0'
                method:
                  type: string
                  default: suix_getCoins
                params:
                  type: array
                  minItems: 1
                  maxItems: 4
                  items:
                    oneOf:
                      - title: owner
                        $ref: '#/components/schemas/SuiAddress'
                        description: The owner's Sui address
                      - title: coin_type
                        type: string
                        description: Optional type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.
                      - title: cursor
                        type: string
                        description: Optional paging cursor
                      - title: limit
                        type: integer
                        description: Maximum number of items per page
              example:
                jsonrpc: '2.0'
                id: 1
                method: suix_getCoins
                params:
                  - '0x6d907beaa3a49db57bdfdb3557e6d405cbf01c293a53e01457d65e92b5d8dd68'
                  - 0x2::sui::SUI
                  - '0xee6b5173afedb35330f60397c2cbb48196ba41921246c304be7b490cee0904eb'
                  - 3
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  jsonrpc:
                    type: string
                  result:
                    $ref: '#/components/schemas/Page_for_Coin_and_String'
              example:
                jsonrpc: '2.0'
                result:
                  data:
                    - coinType: 0x2::sui::SUI
                      coinObjectId: '0xd62ca040aba24f862a763851c54908cd2a0ee7d709c11b93d4a2083747b76856'
                      version: '103626'
                      digest: C9fdokK19BpDCgUgWsJv3cfd4LDyk7WGYBeGhFHbEL2Z
                      balance: '200000000'
                      previousTransaction: tw5DzJTfdxTn4f3rekFrhN7dQTUezBgsEhycDobTBLb
                    - coinType: 0x2::sui::SUI
                      coinObjectId: '0xf44d295a385dc3544d211411b865e8bc4f01f49186970c7cf61e1cc829cc0be7'
                      version: '103626'
                      digest: 5qZkmtN5J5uGHURtiy9BtBhnXATPR2Wa6BJBDLrMzCaf
                      balance: '200000000'
                      previousTransaction: AfgFe7ZfjJ5dWV6VAy2LbtvBFhcABkvdvwEjLrRcFqtr
                    - coinType: 0x2::sui::SUI
                      coinObjectId: '0x42ef9314ccc792dd4401a88e69c66b4c5e43f21e9e57f4abe3c702649d3a7dd0'
                      version: '103626'
                      digest: FLE2nB2Wio3oUyTx6HyzkrMsWiZxDg9Kk8s7ivvuoBbD
                      balance: '200000000'
                      previousTransaction: 9er6jxigfuQEKsn9gtPV2oW1zGQRcFtKNijHVe88GUJD
                  nextCursor: abcd
                  hasNextPage: true
                id: 1
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
      x-default: nodit-demo
      description: The default value, `nodit-demo`, is only for use in the developer documentation. For real applications or services, use the API key obtained from the Nodit console.
  schemas:
    Hex:
      description: Hex string encoding.
      type: string
    SuiAddress:
      allOf:
        - $ref: '#/components/schemas/Hex'
    BigInt_for_uint64:
      type: string
    ObjectID:
      allOf:
        - $ref: '#/components/schemas/Hex'
    Base58:
      type: string
    Digest:
      allOf:
        - $ref: '#/components/schemas/Base58'
      description: A representation of a 32 byte digest
    TransactionDigest:
      allOf:
        - $ref: '#/components/schemas/Digest'
      description: A transaction will have a (unique) digest.
    SequenceNumber:
      type: integer
      format: uint64
      minimum: 0
    Coin:
      type: object
      required:
        - balance
        - coinObjectId
        - coinType
        - digest
        - previousTransaction
        - version
      properties:
        balance:
          $ref: '#/components/schemas/BigInt_for_uint64'
        coinObjectId:
          $ref: '#/components/schemas/ObjectID'
        coinType:
          type: string
        digest:
          $ref: '#/components/schemas/Digest'
        previousTransaction:
          $ref: '#/components/schemas/TransactionDigest'
        version:
          $ref: '#/components/schemas/SequenceNumber'
    Page_for_Coin_and_String:
      description: '`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.'
      type: object
      required:
        - data
        - hasNextPage
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Coin'
        hasNextPage:
          type: boolean
        nextCursor:
          type:
            - string
            - 'null'
    Error:
      type: object
      properties:
        code:
          type: string
          description: Returns a code that identifies the situation where the error occurred.
        message:
          type: string
          description: Returns a detailed message explaining the cause of the error.
      required:
        - code
        - message
  responses:
    '400':
      description: Unauthorized
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - notExists
                  object_id:
                    $ref: '#/components/schemas/ObjectID'
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - dynamic_field_not_found
                  parent_object_id:
                    $ref: '#/components/schemas/ObjectID'
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - deleted
                  digest:
                    $ref: '#/components/schemas/Digest'
                  object_id:
                    $ref: '#/components/schemas/ObjectID'
                  version:
                    $ref: '#/components/schemas/BigInt_for_uint64'
              - type: object
                required:
                  - code
                properties:
                  code:
                    type: string
                    enum:
                      - unknown
              - type: object
                required:
                  - code
                  - error
                properties:
                  code:
                    type: string
                    enum:
                      - displayError
                  error:
                    type: string
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: AUTHENTICATION_FAILED
              message: Authentication failed
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: PERMISSION_DENIED
              message: Permission denied
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: RESOURCE_NOT_FOUND
              message: 'Resource not found: { RESOURCE1_NAME = RESOURCE1_VALUE, RESOURCE2_NAME = RESOURCE2_VALUE, ... }'
    '429':
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: TOO_MANY_REQUESTS
              message: Too many requests
