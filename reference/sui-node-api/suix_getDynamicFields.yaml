openapi: 3.1.0
info:
  title: SUI Node API
  version: 1.2.10
servers:
  - url: https://{sui-network}.nodit.io
    variables:
      sui-network:
        description: The network to use for the API.
        enum:
          - sui-mainnet
        default: sui-mainnet
paths:
  /:
    post:
      security:
        - api_key: []
      tags:
        - suix_getDynamicFields
      description: |
        Return the list of dynamic field objects owned by an object.
      summary: suix_getDynamicFields
      operationId: suix_getDynamicFields
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - jsonrpc
                - method
                - params
              properties:
                id:
                  type: integer
                  default: 1
                jsonrpc:
                  type: string
                  default: '2.0'
                method:
                  type: string
                  default: suix_getDynamicFields
                params:
                  type: array
                  minItems: 1
                  maxItems: 3
                  items:
                    oneOf:
                      - title: parent_object_id
                        $ref: '#/components/schemas/ObjectID'
                        description: The ID of the parent object
                      - title: cursor
                        $ref: '#/components/schemas/ObjectID'
                        description: An optional paging cursor. If provided, the query will start from the next item after the specified cursor. Default to start from the first item if not specified.
                      - title: limit
                        type: integer
                        description: Maximum item returned per page, default to [QUERY_MAX_RESULT_LIMIT] if not specified.
              example:
                jsonrpc: '2.0'
                id: 1
                method: suix_getDynamicFields
                params:
                  - '0x5612581eba57ebe7e594b809ccceec2be4dac6ff6945d49b3ecc043d049611f6'
                  - '0x671832358f25bfacde706e528df4e15bb8de6dadd21835dfe44f4973139c15f9'
                  - 3
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  jsonrpc:
                    type: string
                  id:
                    type: integer
                  result:
                    $ref: '#/components/schemas/Page_for_DynamicFieldInfo_and_ObjectID'
              example:
                jsonrpc: '2.0'
                result:
                  data:
                    - name:
                        type: 0x0000000000000000000000000000000000000000000000000000000000000009::test::TestField
                        value: some_value
                      bcsEncoding: base64
                      bcsName: FDB4OTo6dGVzdDo6VGVzdEZpZWxk
                      type: DynamicField
                      objectType: test
                      objectId: '0xcfd10bca4d517e9452ad5486d69ee482b758c2399039dbbedd5db24385e934d6'
                      version: 1
                      digest: 9oCJR2QHVThbwWtSYwmWv6oSFw26PuxXkLyFrUbNqpU2
                    - name:
                        type: 0x0000000000000000000000000000000000000000000000000000000000000009::test::TestField
                        value: some_value
                      bcsEncoding: base64
                      bcsName: FDB4OTo6dGVzdDo6VGVzdEZpZWxk
                      type: DynamicField
                      objectType: test
                      objectId: '0x05a4a796534a1833ca2c4df8fda7d073bbbf2715d2cd82ed40dc051dd5e05f7f'
                      version: 1
                      digest: 3F8njMJQe6DNxeuvUnHPVjuR9Lt3RNwfsBoxDcB9SXAa
                    - name:
                        type: 0x0000000000000000000000000000000000000000000000000000000000000009::test::TestField
                        value: some_value
                      bcsEncoding: base64
                      bcsName: FDB4OTo6dGVzdDo6VGVzdEZpZWxk
                      type: DynamicField
                      objectType: test
                      objectId: '0x6d95af2033dd243fe6bdc6886d51b7d1cb695b9491893f88a5ae1b9d4f235b3c'
                      version: 1
                      digest: 9Ury7TXnLtHDrxreKjv5eMJpDAU4wZRuev4JJ1UnJBMp
                  nextCursor: '0xfd0b2c4326c56b1fec231d73038dba0f0885b97982f5fcac3ec6f5c8cae16743'
                  hasNextPage: true
                id: 1
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
      x-default: nodit-demo
      description: The default value, `nodit-demo`, is only for use in the developer documentation. For real applications or services, use the API key obtained from the Nodit console.
  schemas:
    Hex:
      description: Hex string encoding.
      type: string
    ObjectID:
      allOf:
        - $ref: '#/components/schemas/Hex'
    Base64:
      description: Base64 encoding
      type: string
    Base58:
      type: string
    Digest:
      allOf:
        - $ref: '#/components/schemas/Base58'
      description: A representation of a 32 byte digest
    DynamicFieldName:
      type: object
      required:
        - type
        - value
      properties:
        type:
          type: string
        value:
          type: boolean
    DynamicFieldType:
      type: string
      enum:
        - DynamicField
        - DynamicObject
    BigInt_for_uint64:
      type: string
    DynamicFieldInfo:
      type: object
      oneOf:
        - type: object
          required:
            - bcsEncoding
            - bcsName
          properties:
            bcsEncoding:
              type: string
              enum:
                - base64
            bcsName:
              $ref: '#/components/schemas/Base64'
        - type: object
          required:
            - bcsEncoding
            - bcsName
          properties:
            bcsEncoding:
              type: string
              enum:
                - base58
            bcsName:
              $ref: '#/components/schemas/Base58'
      required:
        - digest
        - name
        - objectId
        - objectType
        - type
        - version
      properties:
        digest:
          $ref: '#/components/schemas/Digest'
        name:
          $ref: '#/components/schemas/DynamicFieldName'
        objectId:
          $ref: '#/components/schemas/ObjectID'
        objectType:
          type: string
        type:
          $ref: '#/components/schemas/DynamicFieldType'
        version:
          $ref: '#/components/schemas/BigInt_for_uint64'
    Page_for_DynamicFieldInfo_and_ObjectID:
      description: '`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.'
      type: object
      required:
        - data
        - hasNextPage
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DynamicFieldInfo'
        hasNextPage:
          type: boolean
        nextCursor:
          $ref: '#/components/schemas/ObjectID'
    Error:
      type: object
      properties:
        code:
          type: string
          description: Returns a code that identifies the situation where the error occurred.
        message:
          type: string
          description: Returns a detailed message explaining the cause of the error.
      required:
        - code
        - message
  responses:
    '400':
      description: Unauthorized
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - notExists
                  object_id:
                    $ref: '#/components/schemas/ObjectID'
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - dynamic_field_not_found
                  parent_object_id:
                    $ref: '#/components/schemas/ObjectID'
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - deleted
                  digest:
                    $ref: '#/components/schemas/Digest'
                  object_id:
                    $ref: '#/components/schemas/ObjectID'
                  version:
                    $ref: '#/components/schemas/BigInt_for_uint64'
              - type: object
                required:
                  - code
                properties:
                  code:
                    type: string
                    enum:
                      - unknown
              - type: object
                required:
                  - code
                  - error
                properties:
                  code:
                    type: string
                    enum:
                      - displayError
                  error:
                    type: string
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: AUTHENTICATION_FAILED
              message: Authentication failed
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: PERMISSION_DENIED
              message: Permission denied
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: RESOURCE_NOT_FOUND
              message: 'Resource not found: { RESOURCE1_NAME = RESOURCE1_VALUE, RESOURCE2_NAME = RESOURCE2_VALUE, ... }'
    '429':
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: TOO_MANY_REQUESTS
              message: Too many requests
