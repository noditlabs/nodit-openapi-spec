openapi: 3.1.0
info:
  title: suix_getCommitteeInfo
  version: 1.2.10
servers:
  - url: https://{sui-network}.nodit.io
    variables:
      sui-network:
        description: The network to use for the API.
        enum:
          - sui-mainnet
        default: sui-mainnet
paths:
  /:
    post:
      security:
        - api_key: []
      tags:
        - suix_getCommitteeInfo
      description: |
        Return the committee information for the asked epoch.
      summary: suix_getCommitteeInfo
      operationId: sui-suix_getCommitteeInfo
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - jsonrpc
                - method
                - params
              properties:
                id:
                  type: integer
                  default: 1
                jsonrpc:
                  type: string
                  default: '2.0'
                method:
                  type: string
                  default: suix_getCommitteeInfo
                params:
                  type: array
                  minItems: 0
                  maxItems: 1
                  items:
                    oneOf:
                      - title: epoch
                        type: string
                        description: The epoch of interest. If None, default to the latest epoch
              example:
                jsonrpc: '2.0'
                id: 1
                method: suix_getCommitteeInfo
                params:
                  - '5000'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  jsonrpc:
                    type: string
                  id:
                    type: integer
                  result:
                    $ref: '#/components/schemas/CommitteeInfo'
              example:
                jsonrpc: '2.0'
                result:
                  epoch: '5000'
                  validators:
                    - - jc/20VUECmVvSBmxMRG1LFdGqGunLzlfuv4uw4R9HoFA5iSnUf32tfIFC8cgXPnTAATJCwx0Cv/TJs5nPMKyOi0k1T4q/rKG38Zo/UBgCJ1tKxe3md02+Q0zLlSnozjU
                      - '2500'
                    - - mfJe9h+AMrkUY2RgmCxcxvE07x3a52ZX8sv+wev8jQlzdAgN9vzw3Li8Sw2OCvXYDrv/K0xZn1T0LWMS38MUJ2B4wcw0fru+xRmL4lhRPzhrkw0CwnSagD4jMJVevRoQ
                      - '2500'
                    - - rd7vlNiYyI5A297/kcXxBfnPLHR/tvK8N+wD1ske2y4aV4z1RL6LCTHiXyQ9WbDDDZihbOO6HWzx1/UEJpkusK2zE0sFW+gUDS218l+wDYP45CIr8B/WrJOh/0152ljy
                      - '2500'
                    - - s/1e+1yHJAOkrRPxGZUTYG0jNUqEUkmuoVdWTCP/PBXGyeZSty10DoysuTy8wGhrDsDMDBx2C/tCtDZRn8WoBUt2UzqXqfI5h9CX75ax8lJrsgc/oQp3GZQXcjR+8nT0
                      - '2500'
                id: 1
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
      x-default: nodit-demo
      description: The default value, `nodit-demo`, is only for use in the developer documentation. For real applications or services, use the API key obtained from the Nodit console.
  schemas:
    BigInt_for_uint64:
      type: string
    CommitteeInfo:
      description: RPC representation of the [Committee] type.
      type: object
      required:
        - epoch
        - validators
      properties:
        epoch:
          $ref: '#/components/schemas/BigInt_for_uint64'
        validators:
          type: array
    Hex:
      description: Hex string encoding.
      type: string
    ObjectID:
      allOf:
        - $ref: '#/components/schemas/Hex'
    Base58:
      type: string
    Digest:
      allOf:
        - $ref: '#/components/schemas/Base58'
      description: A representation of a 32 byte digest
    Error:
      type: object
      properties:
        code:
          type: string
          description: Returns a code that identifies the situation where the error occurred.
        message:
          type: string
          description: Returns a detailed message explaining the cause of the error.
      required:
        - code
        - message
  responses:
    '400':
      description: Unauthorized
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - notExists
                  object_id:
                    $ref: '#/components/schemas/ObjectID'
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - dynamic_field_not_found
                  parent_object_id:
                    $ref: '#/components/schemas/ObjectID'
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - deleted
                  digest:
                    $ref: '#/components/schemas/Digest'
                  object_id:
                    $ref: '#/components/schemas/ObjectID'
                  version:
                    $ref: '#/components/schemas/BigInt_for_uint64'
              - type: object
                required:
                  - code
                properties:
                  code:
                    type: string
                    enum:
                      - unknown
              - type: object
                required:
                  - code
                  - error
                properties:
                  code:
                    type: string
                    enum:
                      - displayError
                  error:
                    type: string
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: AUTHENTICATION_FAILED
              message: Authentication failed
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: PERMISSION_DENIED
              message: Permission denied
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: RESOURCE_NOT_FOUND
              message: 'Resource not found: { RESOURCE1_NAME = RESOURCE1_VALUE, RESOURCE2_NAME = RESOURCE2_VALUE, ... }'
    '429':
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: TOO_MANY_REQUESTS
              message: Too many requests
