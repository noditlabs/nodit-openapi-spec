openapi: 3.1.0
info:
  title: SUI Node API
  version: 1.2.10
servers:
  - url: https://{sui-network}.nodit.io
    variables:
      sui-network:
        description: The network to use for the API.
        enum:
          - sui-mainnet
        default: sui-mainnet
paths:
  /:
    post:
      security:
        - api_key: []
      tags:
        - suix_getCoinMetadata
      description: |
        Return metadata (e.g., symbol, decimals) for a coin. Note that if the coin's metadata was wrapped in the transaction that published its marker type, or the latest version of the metadata object is wrapped or deleted, it will not be found.
      summary: suix_getCoinMetadata
      operationId: suix_getCoinMetadata
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - jsonrpc
                - method
                - params
              properties:
                id:
                  type: integer
                  default: 1
                jsonrpc:
                  type: string
                  default: '2.0'
                method:
                  type: string
                  default: suix_getCoinMetadata
                params:
                  type: array
                  minItems: 1
                  maxItems: 1
                  items:
                    oneOf:
                      - title: coin_type
                        type: string
                        description: Type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC)
              example:
                jsonrpc: '2.0'
                id: 1
                method: suix_getCoinMetadata
                params:
                  - 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  jsonrpc:
                    type: string
                  result:
                    $ref: '#/components/schemas/SuiCoinMetadata'
              example:
                jsonrpc: '2.0'
                result:
                  decimals: 9
                  name: Usdc
                  symbol: USDC
                  description: Stable coin.
                  iconUrl: null
                  id: '0x51ceab2edc89f74730e683ebee65578cb3bc9237ba6fca019438a9737cf156ae'
                id: 1
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
      x-default: nodit-demo
      description: The default value, `nodit-demo`, is only for use in the developer documentation. For real applications or services, use the API key obtained from the Nodit console.
  schemas:
    Hex:
      description: Hex string encoding.
      type: string
    ObjectID:
      allOf:
        - $ref: '#/components/schemas/Hex'
    SuiCoinMetadata:
      type: object
      required:
        - decimals
        - description
        - name
        - symbol
      properties:
        decimals:
          description: Number of decimal places the coin uses.
          type: integer
          format: uint8
          minimum: 0
        description:
          description: Description of the token
          type: string
        iconUrl:
          description: URL for the token logo
          type:
            - string
            - 'null'
        id:
          description: Object id for the CoinMetadata object
          $ref: '#/components/schemas/ObjectID'
        name:
          description: Name for the token
          type: string
        symbol:
          description: Symbol for the token
          type: string
    Base58:
      type: string
    Digest:
      allOf:
        - $ref: '#/components/schemas/Base58'
      description: A representation of a 32 byte digest
    BigInt_for_uint64:
      type: string
    Error:
      type: object
      properties:
        code:
          type: string
          description: Returns a code that identifies the situation where the error occurred.
        message:
          type: string
          description: Returns a detailed message explaining the cause of the error.
      required:
        - code
        - message
  responses:
    '400':
      description: Unauthorized
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - notExists
                  object_id:
                    $ref: '#/components/schemas/ObjectID'
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - dynamic_field_not_found
                  parent_object_id:
                    $ref: '#/components/schemas/ObjectID'
              - type: object
                properties:
                  code:
                    type: string
                    enum:
                      - deleted
                  digest:
                    $ref: '#/components/schemas/Digest'
                  object_id:
                    $ref: '#/components/schemas/ObjectID'
                  version:
                    $ref: '#/components/schemas/BigInt_for_uint64'
              - type: object
                required:
                  - code
                properties:
                  code:
                    type: string
                    enum:
                      - unknown
              - type: object
                required:
                  - code
                  - error
                properties:
                  code:
                    type: string
                    enum:
                      - displayError
                  error:
                    type: string
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: AUTHENTICATION_FAILED
              message: Authentication failed
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: PERMISSION_DENIED
              message: Permission denied
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: RESOURCE_NOT_FOUND
              message: 'Resource not found: { RESOURCE1_NAME = RESOURCE1_VALUE, RESOURCE2_NAME = RESOURCE2_VALUE, ... }'
    '429':
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: TOO_MANY_REQUESTS
              message: Too many requests
