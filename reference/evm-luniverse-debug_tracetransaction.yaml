openapi: 3.1.0
info:
  title: evm-luniverse-debug_traceTransaction
  version: 1.2.10
servers:
  - url: https://{luniverse-network}.nodit.io
    variables:
      luniverse-network:
        default: luniverse-mainnet
        enum:
          - luniverse-mainnet
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
      x-default: nodit-demo
      description: >-
        The default value, `nodit-demo`, is only for use in the developer
        documentation. For real applications or services, use the API key
        obtained from the Nodit console.
paths:
  /:
    post:
      security:
        - api_key: []
      tags:
        - evm-luniverse-debug_traceTransaction
      description: >-
        이미 처리된 Transaction의 처리 과정을 노드 레벨에서 replay하면서 트랜잭션의 실행 과정에서 각각의 단계와 관련된
        상세한 정보를 확인할 수 있는 디버깅 메소드입니다. 트랜잭션의 호출 스택, 가스 사용량, 상태 변경, 로그 이벤트 등 다양한
        정보를 반환합니다. 이를 통해 컨트랙트의 함수 호출 흐름, 변수 변경, 이벤트 발생 등을 추적하고 디버깅할 수 있습니다.
      summary: debug_traceTransaction
      operationId: luniverse-debug_traceTransaction
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - jsonrpc
                - method
                - params
              properties:
                id:
                  type: integer
                  default: 1
                jsonrpc:
                  type: string
                  default: '2.0'
                method:
                  type: string
                  default: debug_traceTransaction
                params:
                  type: array
                  items:
                    oneOf:
                      - title: Transaction Hash
                        type: string
                        pattern: ^0[xX][0-9a-fA-F]{64}
                        default: >-
                          0xda148d856aef6d77d0b76c90ef1091ffe77afe9ee9b1c6cc23f28f042f198bd8
                        description: >-
                          트랜잭션 해시는 트랜잭션의 고유 식별자입니다. 트랜잭션 해시는 64자리 16진수 문자열로
                          표현됩니다.
                      - title: Trace Option Object
                        type: object
                        properties:
                          tracer:
                            type: string
                            enum:
                              - callTracer
                              - prestateTracer
                            default: callTracer
                            description: >-
                              tracer의 타입을 지정하는 필드로, "callTracer" 또는
                              "prestateTracer" 값 중 하나로 지정합니다.

                              1. `callTracer` : callTracer는 실행된 트랜잭션의 실행 경로와 결과를
                              확인하는 데 사용됩니다. 트랜잭션의 호출 스택, 반환 값, 가스 소비량, Revert 사유
                              등의 정보를 제공하며, 스마트 계약의 함수 호출과 상호작용하는 과정을 추적할 수 있습니다.
                              실행 옵션(onlyTopCall)에 따라 특정 call의 nested call들을 모두
                              조회하여 추적할 수 있습니다.

                              2. `prestateTracer`: prestateTracer는 특정 트랜잭션이나 블록이
                              실행되기 전의 상태(pre-state)를 추적하는 도구입니다. 트랜잭션이 실행되기 전의
                              계정 상태와 계약 코드를 기록하며, 트랜잭션의 실행 전과 후의 상태 변화를 분석할 수
                              있습니다. prestateTracer는 스마트 계약의 상태 변경 및 계정 간 상호작용을
                              추적하는 데 사용됩니다.
                          tracerConfig:
                            type: object
                            properties:
                              onlyTopCall:
                                type: boolean
                                default: true
                            description: >-
                              tracer 설정을 위한 Object입니다. Boolean 타입의 "onlyTopCall"
                              옵션을 사용할 수 있으며, true로 설정하는 경우 main call에 대한 이력만
                              trace합니다. false로 설정하는 경우 sub-call 레벨까지 trace합니다.
                          timeout:
                            type: string
                            default: 1s
                            description: >-
                              JavaScript 기반 추적 호출에 대한 기본 타임아웃 5초를 덮어쓰는 소수점 숫자의
                              지속 시간 문자열입니다. 최대 타임아웃은 "10s"입니다. 유효한 시간 단위는 "ns",
                              "us", "ms", "s"이며, 각각 "300ms" 또는 "2s45ms"와 같이 여러
                              시간 단위를 포함할 수 있습니다.
                        description: 'trace 옵션 설정을 위한 object입니다. '
                  minItems: 2
                  maxItems: 2
                  default:
                    - >-
                      0xda148d856aef6d77d0b76c90ef1091ffe77afe9ee9b1c6cc23f28f042f198bd8
                    - tracer: callTracer
                  description: |-
                    다음 파라미터들을 타입에 맞게 배열로 입력합니다.

                    1. `transaction hash`: 조회하고자 하는 트랜잭션 해시를 문자열 형식으로 입력합니다.
                    2. `trace option`: trace 옵션 설정을 위한 object입니다.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              example:
                jsonrpc: '2.0'
                id: '1'
                result:
                  from: '0xb64a30399f7f6b0c154c2e7af0a3ec7b0a5b131a'
                  gas: '0x565f'
                  gasUsed: '0x565f'
                  to: '0x94750381be1aba0504c666ee1db118f68f0780d4'
                  input: 0x
                  value: '0x5d81a504883156'
                  type: CALL
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - error_code
                properties:
                  message:
                    type: string
                  error_code:
                    type: string
                    description: >-
                      These codes provide more granular error information beyond
                      just the HTTP status code of the response.


                      Allowed values: account_not_found, resource_not_found,
                      module_not_found, struct_field_not_found,
                      version_not_found, transaction_not_found,
                      table_item_not_found, block_not_found,
                      state_value_not_found, version_pruned, block_pruned,
                      invalid_input, invalid_transaction_update,
                      sequence_number_too_old, vm_error, health_check_failed,
                      mempool_is_full, internal_error, web_framework_error,
                      bcs_not_supported, api_disabled
                  vm_error_code:
                    type: integer
                    description: >-
                      A code providing VM error details when submitting
                      transactions to the VM.
