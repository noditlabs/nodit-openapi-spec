openapi: 3.1.0
info:
  title: solana-getAccountInfo
  version: 1.2.17
servers:
  - url: https://{solana-network}.nodit.io
    variables:
      solana-network:
        description: The network to use for the API.
        enum:
          - solana-mainnet
          - solana-devnet
        default: solana-mainnet
paths:
  /:
    post:
      security:
        - api_key: []
      tags:
        - solana-http-method-getAccountInfo
      description: |
        Returns all information associated with the account of provided Pubkey
      summary: getAccountInfo
      operationId: solana-getAccountInfo
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jsonrpc
                - id
                - method
                - params
              properties:
                jsonrpc:
                  type: string
                  default: '2.0'
                id:
                  type: integer
                  default: 1
                method:
                  type: string
                  default: getAccountInfo
                params:
                  type: array
                  minItems: 1
                  maxItems: 2
                  description: |
                    It contains following items:
                    1. Pubkey (`required`)
                    2. ConfigurationObject (`optional`)
                  items:
                    oneOf:
                      - title: Pubkey
                        type: string
                        description: Pubkey of account to query, as base-58 encoded string.
                      - title: Configuration Object
                        type: object
                        properties:
                          commitment:
                            $ref: '#/components/schemas/Commitment'
                          encoding:
                            type: string
                            enum:
                              - base58
                              - base64
                              - base64+zstd
                              - jsonParsed
                            description: |
                              Encoding format for Account data.

                              base58 is slow and limited to less than 129 bytes of Account data.
                              base64 will return base64 encoded data for Account data of any size.
                              base64+zstd compresses the Account data using Zstandard and base64-encodes the result.
                              jsonParsed encoding attempts to use program-specific state parsers to return more human-readable and explicit account state data.
                              If jsonParsed is requested but a parser cannot be found, the field falls back to base64 encoding, detectable when the data field is type string.
                          dataSlice:
                            $ref: '#/components/schemas/DataSlice'
                          minContextSlot:
                            $ref: '#/components/schemas/MinContextSlot'
              example:
                jsonrpc: '2.0'
                id: 1
                method: getAccountInfo
                params:
                  - 3fJ7AiixCoHhaYzaNn1nNoLZMQnrGSMDNmMN4ZNUMpEa
                  - commitment: processed
                    encoding: base58
                    dataSlice:
                      offset: 0
                      length: 100
                    minContextSlot: '1234567890'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: |
                          If the requested account doesn't exist result will be null. Otherwise, an object containing:
                          1. context
                          2. value
                        properties:
                          context:
                            $ref: '#/components/schemas/Context'
                          value:
                            type: object
                            properties:
                              data:
                                description: |
                                  Data associated with the account, either as encoded binary data or JSON format {<program>: <state>} - depending on encoding parameter
                                oneOf:
                                  - type: array
                                    items:
                                      minItems: 2
                                      maxItems: 2
                                      oneOf:
                                        - type: string
                                        - title: encoding
                                          type: string
                                          enum:
                                            - base58
                                            - base64
                                            - base64+zstd
                                            - jsonParsed
                                            - json
                                            - base64+jsonParsed
                                  - type: object
                              executable:
                                type: boolean
                                description: Boolean indicating if the account contains a program (and is strictly read-only)
                              lamports:
                                type: integer
                                description: Number of lamports assigned to this account
                              owner:
                                type: string
                                description: base-58 encoded Pubkey of the program this account has been assigned to
                              rentEpoch:
                                type: integer
                                description: The epoch at which this account will next owe rent, as u64
                              space:
                                type: integer
                                description: The data size of the account
                example:
                  jsonrpc: '2.0'
                  result:
                    context:
                      apiVersion: 2.3.7
                      slot: 403800551
                    value:
                      data:
                        - ''
                        - base58
                      executable: false
                      lamports: 88863104690252
                      owner: '11111111111111111111111111111111'
                      rentEpoch: 18446744073709552000
                      space: 0
                  id: 1
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
      x-default: nodit-demo
      description: The default value, `nodit-demo`, is only for use in the developer documentation. For real applications or services, use the API key obtained from the Nodit console.
  schemas:
    Commitment:
      type: string
      description: |
        The commitment describes how finalized a block is at that point in time.
        - finalized - the node will query the most recent block confirmed by supermajority of the cluster as having reached maximum lockout, meaning the cluster has recognized this block as finalized
        - confirmed - the node will query the most recent block that has been voted on by supermajority of the cluster.
        - processed - the node will query its most recent block. Note that the block may still be skipped by the cluster.
      enum:
        - processed
        - confirmed
        - finalized
    DataSlice:
      type: object
      description: |
        Request a slice of the account's data. Data slicing is only available for base58, base64, or base64+zstd encodings.
      properties:
        offset:
          type: integer
          description: number of bytes to return
        length:
          type: integer
          description: byte offset from which to start reading
    MinContextSlot:
      type: string
      description: The minimum slot that the request can be evaluated at.
    SuccessfulResponse:
      type: object
      properties:
        id:
          type: integer
          description: The request ID
        jsonrpc:
          type: string
          description: The JSON-RPC version
    Context:
      type: object
      description: An object containing metadata about the current state of the Solana network at the time of the request.
      properties:
        apiVersion:
          type: string
          description: The API version used for the request
        slot:
          type: integer
          description: The slot number at which the request was evaluated
    ErrorFromRPC:
      type: object
      properties:
        code:
          type: integer
          description: Returns a code that identifies the situation where the error occurred.
          example: -32602
        message:
          type: string
          description: Returns a detailed message explaining the cause of the error.
      required:
        - code
        - message
    Error:
      type: object
      properties:
        code:
          type: string
          description: Returns a code that identifies the situation where the error occurred.
        message:
          type: string
          description: Returns a detailed message explaining the cause of the error.
      required:
        - code
        - message
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              jsonrpc:
                type: string
                description: JSON-RPC version
                example: '2.0'
              id:
                type: integer
                description: Request ID
                example: 1
              error:
                $ref: '#/components/schemas/ErrorFromRPC'
            required:
              - jsonrpc
              - id
              - error
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: AUTHENTICATION_FAILED
              message: Authentication failed
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: PERMISSION_DENIED
              message: Permission denied
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: RESOURCE_NOT_FOUND
              message: 'Resource not found: { RESOURCE1_NAME = RESOURCE1_VALUE, RESOURCE2_NAME = RESOURCE2_VALUE, ... }'
    '429':
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: TOO_MANY_REQUESTS
              message: Too many requests
