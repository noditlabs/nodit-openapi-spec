openapi: 3.1.0
info:
  title: solana-getProgramAccounts
  version: 1.2.15
servers:
  - url: https://{solana-network}.nodit.io
    variables:
      solana-network:
        description: The network to use for the API.
        enum:
          - solana-devnet
        default: solana-devnet
paths:
  /:
    post:
      security:
        - api_key: []
      tags:
        - solana-http-method-getProgramAccounts
      description: |
        Returns all accounts owned by the provided program Pubkey
      summary: getProgramAccounts
      operationId: solana-getProgramAccounts
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jsonrpc
                - id
                - method
                - params
              properties:
                jsonrpc:
                  type: string
                  default: '2.0'
                id:
                  type: integer
                  default: 1
                method:
                  type: string
                  default: getProgramAccounts
                params:
                  type: array
                  minItems: 1
                  maxItems: 2
                  description: |
                    It contains following items:
                    1. Pubkey of program (`required`)
                    2. ConfigurationObject (`optional`)
                  items:
                    oneOf:
                      - title: Pubkey of program
                        type: string
                        description: Base-58 encoded Pubkey of the program to query
                      - title: Configuration Object
                        type: object
                        properties:
                          commitment:
                            $ref: '#/components/schemas/Commitment'
                          minContextSlot:
                            $ref: '#/components/schemas/MinContextSlot'
                          withContext:
                            type: boolean
                            description: Wrap the result in an RpcResponse JSON object
                          encoding:
                            $ref: '#/components/schemas/Encoding'
                          dataSlice:
                            $ref: '#/components/schemas/DataSlice'
                          filters:
                            type: array
                            description: |
                              Filter results using up to 4 filter objects.
                            items:
                              type: object
              example:
                jsonrpc: '2.0'
                id: 1
                method: getProgramAccounts
                params:
                  - 4Nd1mBQtrMJVYVfKf2PJy9NZUZdTAsp7D4xWLs4gDB4T
                  - commitment: finalized
                    filters:
                      - dataSize: 17
                      - memcmp:
                          offset: 4
                          bytes: 3Mc6vR
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          type: object
                          properties:
                            pubkey:
                              type: string
                              description: The account Pubkey as base-58 encoded string
                            account:
                              $ref: '#/components/schemas/Account'
                example:
                  jsonrpc: '2.0'
                  result:
                    - pubkey: CxELquR1gPP8wHe33gZ4QxqGB3sZ9RSwsJ2KshVewkFY
                      account:
                        data: 2R9jLfiAQ9bgdcw6h8s44439
                        executable: false
                        lamports: 15298080
                        owner: 4Nd1mBQtrMJVYVfKf2PJy9NZUZdTAsp7D4xWLs4gDB4T
                        rentEpoch: 28
                        space: 42
                  id: 1
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
      x-default: nodit-demo
      description: The default value, `nodit-demo`, is only for use in the developer documentation. For real applications or services, use the API key obtained from the Nodit console.
  schemas:
    Commitment:
      type: string
      description: |
        The commitment describes how finalized a block is at that point in time.
        - finalized - the node will query the most recent block confirmed by supermajority of the cluster as having reached maximum lockout, meaning the cluster has recognized this block as finalized
        - confirmed - the node will query the most recent block that has been voted on by supermajority of the cluster.
        - processed - the node will query its most recent block. Note that the block may still be skipped by the cluster.
      enum:
        - processed
        - confirmed
        - finalized
    MinContextSlot:
      type: string
      description: The minimum slot that the request can be evaluated at.
    Encoding:
      type: string
      enum:
        - base58
        - base64
        - base64+zstd
        - jsonParsed
      description: |
        Encoding format for the returned Account data

        - `base58` is slow and limited to less than 129 bytes of Account data.
        - `base64` will return base64 encoded data for Account data of any size.
        - `base64+zstd` compresses the Account data using Zstandard and base64-encodes the result.
        - `jsonParsed` encoding attempts to use program-specific state parsers to return more human-readable and explicit account state data.
        - If `jsonParsed` is requested but a parser cannot be found, the field falls back to base64 encoding, detectable when the data field is type <string>.
    DataSlice:
      type: object
      description: |
        Request a slice of the account's data. Data slicing is only available for base58, base64, or base64+zstd encodings.
      properties:
        offset:
          type: integer
          description: number of bytes to return
        length:
          type: integer
          description: byte offset from which to start reading
    SuccessfulResponse:
      type: object
      properties:
        id:
          type: integer
          description: The request ID
        jsonrpc:
          type: string
          description: The JSON-RPC version
    Lamports:
      type: integer
      format: uint64
      description: Number of lamports assigned to this account
    Account:
      type: object
      properties:
        data:
          type: array
          description: |
            Data associated with the account, either as encoded binary data or JSON format {<program>: <state>} - depending on encoding parameter
        executable:
          type: boolean
          description: Boolean indicating if the account contains a program (and is strictly read-only)
        lamports:
          $ref: '#/components/schemas/Lamports'
        owner:
          type: string
          description: Base-58 encoded Pubkey of the program this account has been assigned to
        rentEpoch:
          type: integer
          format: uint64
          description: The epoch at which this account will next owe rent
        space:
          type: integer
          format: uint64
          description: The data size of the account
    ErrorFromRPC:
      type: object
      properties:
        code:
          type: integer
          description: Returns a code that identifies the situation where the error occurred.
          example: -32602
        message:
          type: string
          description: Returns a detailed message explaining the cause of the error.
      required:
        - code
        - message
    Error:
      type: object
      properties:
        code:
          type: string
          description: Returns a code that identifies the situation where the error occurred.
        message:
          type: string
          description: Returns a detailed message explaining the cause of the error.
      required:
        - code
        - message
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              jsonrpc:
                type: string
                description: JSON-RPC version
                example: '2.0'
              id:
                type: integer
                description: Request ID
                example: 1
              error:
                $ref: '#/components/schemas/ErrorFromRPC'
            required:
              - jsonrpc
              - id
              - error
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: AUTHENTICATION_FAILED
              message: Authentication failed
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: PERMISSION_DENIED
              message: Permission denied
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: RESOURCE_NOT_FOUND
              message: 'Resource not found: { RESOURCE1_NAME = RESOURCE1_VALUE, RESOURCE2_NAME = RESOURCE2_VALUE, ... }'
    '429':
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: TOO_MANY_REQUESTS
              message: Too many requests
