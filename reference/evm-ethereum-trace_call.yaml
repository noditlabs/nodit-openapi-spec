openapi: 3.1.0
info:
  title: evm-ethereum-trace_call
  version: 1.2.9
servers:
  - url: https://{ethereum-network}.nodit.io
    variables:
      ethereum-network:
        default: ethereum-mainnet
        enum:
          - ethereum-mainnet
          - ethereum-sepolia
          - ethereum-hoodi
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
      x-default: nodit-demo
      description: >-
        The default value, `nodit-demo`, is only for use in the developer
        documentation. For real applications or services, use the API key
        obtained from the Nodit console.
paths:
  /:
    post:
      security:
        - api_key: []
      tags:
        - evm-ethereum-trace_call
      description: >-
        지정된 트랜잭션 호출을 시뮬레이션하고, 그 결과를 반환합니다. 이 메소드는 실제로 트랜잭션을 블록체인에 전송하지 않으며, 가스
        소비량, 실행 결과, 로그 등을 포함한 상세한 실행 정보를 제공합니다. 이는 특정 함수 호출이 어떻게 수행될지 미리 확인하고자 할
        때 유용합니다.
      summary: trace_call
      operationId: trace_call
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - jsonrpc
                - method
                - params
              properties:
                id:
                  type: integer
                  default: 1
                jsonrpc:
                  type: string
                  default: '2.0'
                method:
                  type: string
                  default: trace_call
                params:
                  type: array
                  items:
                    oneOf:
                      - title: Call Object
                        type: object
                        properties:
                          from:
                            type: string
                            description: 트랜잭션의 from 주소를 문자열 형식으로 입력합니다.
                          to:
                            type: string
                            description: 트랜잭션의 to 주소를 문자열 형식으로 입력합니다.
                            default: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'
                          gas:
                            type: string
                            description: >-
                              해당 트랜잭션을 처리하기 위해 필요한 가스의 소모량을 hex형식의 문자열로 입력합니다.
                              스마트 컨트랙트 call을 수행하는 경우 소모되는 가스가 없으므로 0x0로 입력할 수
                              있습니다.
                          gasPrice:
                            type: string
                            description: 설정하고자 하는 가스당 비용을 hex 형식의 문자열로 입력합니다.
                          value:
                            type: string
                            description: 트랜잭션의 value 값입니다.
                          data:
                            type: string
                            description: >-
                              실행하고자 하는 트랜잭션의 method signature 해시값입니다. ABI에서 참고할
                              수 있습니다.
                            default: >-
                              0x70a08231000000000000000000000000d8dA6BF26964aF9D7eEd9e03E53415D37aA96045
                        description: >-
                          트랜잭션을 시뮬레이션하기 위한 call object입니다. 다음 필드를 포함할 수 있습니다.

                          * `from`: 트랜잭션의 from 주소를 문자열 형식으로 입력합니다.

                          * `to` : 트랜잭션의 to 주소를 문자열 형식으로 입력합니다.

                          * `gas` : 해당 트랜잭션을 처리하기 위해 필요한 가스의 소모량을 hex형식의 문자열로
                          입력합니다. 스마트 컨트랙트 call을 수행하는 경우 소모되는 가스가 없으므로 0x0로 입력할 수
                          있습니다.

                          * `gasPrice` : 설정하고자 하는 가스당 비용을 hex 형식의 문자열로 입력합니다.

                          * `value` : 트랜잭션의 value 값입니다.

                          * `data` : 실행하고자 하는 트랜잭션의 method signature 해시값입니다.
                          ABI에서 참고할 수 있습니다.
                      - title: Trace Type
                        type: array
                        items:
                          type: string
                          enum:
                            - vmTrace
                            - trace
                            - stateDiff
                          default: trace
                        minItems: 1
                        maximum: 3
                        description: >-
                          Trace type는 이더리움 블록체인에서 특정 트랜잭션이나 블록의 실행 상세 정보를 조회할 때
                          사용되는 데이터 유형을 명시합니다. 이 배열은 다음 세 가지 문자열 값을 포함할 수 있습니다:

                          - `vmTrace`: 가상 머신의 단계별 실행을 상세하게 추적합니다. 이는 메모리 상태, 스택
                          상태, 그리고 각 실행 명령의 결과를 포함합니다.

                          - `trace`: 트랜잭션 실행에 대한 단계별 로그를 제공합니다. 이 로그에는 호출 흐름과
                          발생한 내부 트랜잭션들의 세부 정보가 포함됩니다.

                          - `stateDiff`: 트랜잭션이 실행되기 전후의 계정 상태의 차이를 보여줍니다. 이는 변경된
                          스토리지 키와 값, 계정의 잔액 및 계약 코드의 변화들을 포함합니다.


                          이 정보는 개발자가 트랜잭션 처리 과정을 더 잘 이해하고 디버깅을 할 수 있게 도와줍니다. 각
                          유형은 블록체인의 특정 측면에 대한 상세 정보를 제공하여 트랜잭션의 영향을 명확하게 파악할 수
                          있게 합니다.
                      - title: Block Number or Tag
                        type: string
                        oneOf:
                          - title: Block Number
                            type: string
                            pattern: ^0[xX][0-9a-fA-F]+$
                            default: '0x1076B5A'
                            description: 블록 넘버는 블록의 순서를 나타내는 숫자입니다. 블록 넘버는 16진수 문자열로 표현됩니다.
                          - title: Block Tag
                            type: string
                            pattern: ^(latest|earliest|pending|safe|finalized)$
                            default: latest
                            description: >-
                              블록 태그는 다음 중 하나를 사용하여 블록을 지정할 수 있습니다.

                              * `earliest`: 체인에서 사용 가능한 가장 오래된 블록을 나타냅니다.

                              * `finalized`: 최근에 확정된 블록을 나타내며, 이는 더 이상 변경될 수 없는
                              안정적인 상태의 블록을 의미합니다. 이 용어는 주로 지분 증명(PoS) 블록체인에서
                              사용되며, 블록이 최종적으로 확정되었음을 나타냅니다.

                              * `safe`: 네트워크에 의해 안전하게 간주되는 최근 블록을 나타냅니다. '안전'한
                              블록은 네트워크 재조직(reorgs)의 위험 없이 신뢰할 수 있는 것으로 간주됩니다.

                              * `latest`: 현재 체인의 가장 최근 블록을 나타내며, 아직 최종 확정되지 않았을
                              수 있어 재조직(reorgs)될 가능성이 있습니다. 이는 일반적으로 가장 최신의 상태를
                              조회할 때 사용됩니다.

                              * `pending`: 아직 채굴되지 않은, 메모리 풀에 있는 트랜잭션들을 포함할 예정인
                              다음 블록을 나타냅니다. 이는 주로 예정된 트랜잭션들의 상태를 확인할 때 사용됩니다.
                        default: '0x12C1A00'
                        description: >-
                          블록 지정을 위해 블록 넘버 또는 블록 태그 중 하나를 사용할 수 있습니다.

                          * 블록 넘버: 16진수 문자열 (ex. "0x1") 

                          * 블록 태그: enum 문자열 (ex. "latest", "earliest",
                          "pending")
                  minItems: 3
                  maxItems: 3
                  default:
                    - from: '0xc90d3Ac75D1D36dF0b0a229E73D8409FB7F3c4ab'
                      to: '0xd3CdA913deB6f67967B99D67aCDFa1712C293601'
                      value: '0x186a0'
                    - - trace
                    - latest
                  description: >-
                    다음 파라미터들을 타입에 맞게 배열로 입력합니다.


                    1. `call object`는 다음과 같은 필드를 포함하는 object입니다.

                    2. `trace type`: 사용하고자 하는 trace 타입을 하나 이상 선택하여 배열로 입력합니다.
                    "vmTrace", "trace", "stateDiff" 값을 사용할 수 있습니다. 각 옵션에 대한 자세한
                    내용은 API 문서 본문을 참고해주세요.

                    3. `block number or block tag`: 조회하고자 하는 블록 넘버를 16진수 문자열
                    형식으로 입력합니다. "earliest", "latest", "pending" 등의 블록 태그를 입력할 수도
                    있습니다.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              example:
                jsonrpc: '2.0'
                id: 1
                result:
                  output: 0x
                  stateDiff: null
                  trace:
                    - action:
                        from: '0xc90d3ac75d1d36df0b0a229e73d8409fb7f3c4ab'
                        callType: call
                        gas: '0x2fa9e78'
                        input: 0x
                        to: '0xd3cda913deb6f67967b99d67acdfa1712c293601'
                        value: '0x186a0'
                      result:
                        gasUsed: '0x0'
                        output: 0x
                      subtraces: 0
                      traceAddress: []
                      type: call
                  vmTrace: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - error_code
                properties:
                  message:
                    type: string
                  error_code:
                    type: string
                    description: >-
                      These codes provide more granular error information beyond
                      just the HTTP status code of the response.


                      Allowed values: account_not_found, resource_not_found,
                      module_not_found, struct_field_not_found,
                      version_not_found, transaction_not_found,
                      table_item_not_found, block_not_found,
                      state_value_not_found, version_pruned, block_pruned,
                      invalid_input, invalid_transaction_update,
                      sequence_number_too_old, vm_error, health_check_failed,
                      mempool_is_full, internal_error, web_framework_error,
                      bcs_not_supported, api_disabled
                  vm_error_code:
                    type: integer
                    description: >-
                      A code providing VM error details when submitting
                      transactions to the VM.
