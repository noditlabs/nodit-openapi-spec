openapi: 3.1.0
info:
  title: evm-ethereum-trace_block
  version: 1.2.10
servers:
  - url: https://{ethereum-network}.nodit.io
    variables:
      ethereum-network:
        default: ethereum-mainnet
        enum:
          - ethereum-mainnet
          - ethereum-sepolia
          - ethereum-hoodi
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
      x-default: nodit-demo
      description: >-
        The default value, `nodit-demo`, is only for use in the developer
        documentation. For real applications or services, use the API key
        obtained from the Nodit console.
paths:
  /:
    post:
      security:
        - api_key: []
      tags:
        - evm-ethereum-trace_block
      description: >-
        지정된 블록에 포함된 모든 트랜잭션의 실행을 추적합니다. 이 메소드는 해당 블록에서 실행된 모든 트랜잭션에 대한 상세한 추적
        정보를 제공하며, 블록 수준에서의 트랜잭션 처리 과정을 분석하는 데 사용됩니다.
      summary: trace_block
      operationId: trace_block
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - jsonrpc
                - method
                - params
              properties:
                id:
                  type: integer
                  default: 1
                jsonrpc:
                  type: string
                  default: '2.0'
                method:
                  type: string
                  default: trace_block
                params:
                  type: array
                  items:
                    oneOf:
                      - title: Block Number or Tag
                        type: string
                        oneOf:
                          - title: Block Number
                            type: string
                            pattern: ^0[xX][0-9a-fA-F]+$
                            default: '0x1076B5A'
                            description: 블록 넘버는 블록의 순서를 나타내는 숫자입니다. 블록 넘버는 16진수 문자열로 표현됩니다.
                          - title: Block Tag
                            type: string
                            pattern: ^(latest|earliest|pending|safe|finalized)$
                            default: latest
                            description: >-
                              블록 태그는 다음 중 하나를 사용하여 블록을 지정할 수 있습니다.

                              * `earliest`: 체인에서 사용 가능한 가장 오래된 블록을 나타냅니다.

                              * `finalized`: 최근에 확정된 블록을 나타내며, 이는 더 이상 변경될 수 없는
                              안정적인 상태의 블록을 의미합니다. 이 용어는 주로 지분 증명(PoS) 블록체인에서
                              사용되며, 블록이 최종적으로 확정되었음을 나타냅니다.

                              * `safe`: 네트워크에 의해 안전하게 간주되는 최근 블록을 나타냅니다. '안전'한
                              블록은 네트워크 재조직(reorgs)의 위험 없이 신뢰할 수 있는 것으로 간주됩니다.

                              * `latest`: 현재 체인의 가장 최근 블록을 나타내며, 아직 최종 확정되지 않았을
                              수 있어 재조직(reorgs)될 가능성이 있습니다. 이는 일반적으로 가장 최신의 상태를
                              조회할 때 사용됩니다.

                              * `pending`: 아직 채굴되지 않은, 메모리 풀에 있는 트랜잭션들을 포함할 예정인
                              다음 블록을 나타냅니다. 이는 주로 예정된 트랜잭션들의 상태를 확인할 때 사용됩니다.
                        default: '0x12C1A00'
                        description: >-
                          블록 지정을 위해 블록 넘버 또는 블록 태그 중 하나를 사용할 수 있습니다.


                          * 블록 넘버: 16진수 문자열 (ex. "0x1") 

                          * 블록 태그: enum 문자열 (ex. "latest", "earliest",
                          "pending")
                  minItems: 1
                  maxItems: 1
                  default:
                    - latest
                  description: >-
                    다음 파라미터들을 타입에 맞게 배열로 입력합니다.


                    1. `block number or block tag`: 조회하고자 하는 블록 넘버를 16진수 문자열
                    형식으로 입력합니다. "earliest", "latest", "pending" 등의 블록 태그를 입력할 수도
                    있습니다.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              example:
                jsonrpc: '2.0'
                id: 1
                result:
                  - action:
                      from: '0x927c9ea873e461c164290f085933dbd15f28069f'
                      callType: call
                      gas: '0x0'
                      input: >-
                        0x00b6e537f9b8256c762f73d5ccf110b3bf00000000023c78dadae1cff0c3678147d885b9bbe3bf2c9cb863968ac23fa58d4a55a7429c6ee71678cdbba9ea65bfe2597340c7df050bb32a0f6458bc7c766d8b55479b2257db3c63f73f9797fe7df0fb7798e089ff4fcb5b524ff39c390031b0ebc99d8bef96faa506fa6779855dd2b89694ddb9e3cb6f16e56ff3bebd2e2edcff926803cf410d9cc3fb382777eb11fbf0e5a75bb932fb4e6db0f9ec63636b76276feaf1a2c4f59c6c441b78016ae01357a110f66cf39dbdcfc2fd2e152b15771d335cbf4b98436a4df3e7e653ffb67d22dac04b5003f9c3affd485bd578bf8b37bef6c8d3cdc131dff3e73ebcc59ec8deffa8e5f2c277f38836f00ad440016f96532f53cceb769a4f559fef19f039e781cd912fbfde2dff1dbeebeee316063ba20dbc063530205ac43fab8869cebabd298fbc03fe79322d0c6ff37b7f3df1adab3773e6aa2dcb9b033afe2df8f8614dd0a34f8dd3ec5fb574544d3b74ca2e517bff82e6148719cb78e2163e0ab80e32f006d4c00d774ad53715ea76a4d76d5d603e6999619bd5e76eb118d5e0990f384292db04b28836f016d44075c547e69caf3fa7df4bd8b1a7eb6c73f3e1c5d5096977cae7f4dd926df82eb1d0996803ef400d3c93ef653c63d192ca95ef62dd0fbcd52db03a55cecf75a2322160fe09cdd7aa9caf8936f01ed44061052d5baf751d079cb38d272eafb68a38dbb9dc81cddebeea63d92ae13ec1895b8936f001d44016fb1981cfa65d92fae23b7bfd9a92c8220b6113d1af6b8f6e59fcccea9ff723115ba20d7c7400100000ffff39c010d601
                      to: '0xff00000000000000000000000000000000047777'
                      value: '0x0'
                    blockHash: >-
                      0x736da46f2d62bb75e496e0456cedb41443776c17068dd32d173236140c30318d
                    blockNumber: 5277952
                    result:
                      gasUsed: '0x0'
                      output: 0x
                    subtraces: 0
                    traceAddress: []
                    transactionHash: >-
                      0x9d0e4396f563189591a89473d989df105b92ebdabd2f5378e8dfd01d71d6a099
                    transactionPosition: 153
                    type: call
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - error_code
                properties:
                  message:
                    type: string
                  error_code:
                    type: string
                    description: >-
                      These codes provide more granular error information beyond
                      just the HTTP status code of the response.


                      Allowed values: account_not_found, resource_not_found,
                      module_not_found, struct_field_not_found,
                      version_not_found, transaction_not_found,
                      table_item_not_found, block_not_found,
                      state_value_not_found, version_pruned, block_pruned,
                      invalid_input, invalid_transaction_update,
                      sequence_number_too_old, vm_error, health_check_failed,
                      mempool_is_full, internal_error, web_framework_error,
                      bcs_not_supported, api_disabled
                  vm_error_code:
                    type: integer
                    description: >-
                      A code providing VM error details when submitting
                      transactions to the VM.
